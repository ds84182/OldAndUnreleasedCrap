local args = {...}
local partition = args[1]

local function split(str, pat)
   local t = {}  -- NOTE: use {n = 0} in Lua-5.0
   local fpat = "(.-)" .. pat
   local last_end = 1
   local s, e, cap = str:find(fpat, 1)
   while s do
      if s ~= 1 or cap ~= "" then
	 table.insert(t,cap)
      end
      last_end = e+1
      s, e, cap = str:find(fpat, last_end)
   end
   if last_end <= #str then
      cap = str:sub(last_end)
      table.insert(t, cap)
   end
   return t
end

local fshlp = {}
function fshlp.navigatePath(part,path)
	local pathcomp = split(path,"/")
	local path = part
	for i, v in pairs(pathcomp) do
		local op = path
		for e, r in pairs(path.child) do
			if r.name == v and r.type == "DIR" then
				path = r
				break
			end
		end
		if path == op then
			return nil
		end
	end
	return path
end
function fshlp.findFile(par,path,name)
	local part = partition.get(par)
	local path = fshlp.navigatePath(part,path)
	if path ~= nil then
		for e, r in pairs(path.child) do
			if r.name == name and r.type == "FILE" then
				return r
			end
		end
	end
end
function fshlp.findDir(par,path,name)
	local part = partition.get(par)
	local path = fshlp.navigatePath(part,path)
	if path ~= nil then
		for e, r in pairs(path.child) do
			if r.name == name and r.type == "DIR" then
				return r
			end
		end
	end
end
function fshlp.find(par,path,name)
	local part = partition.get(par)
	local path = fshlp.navigatePath(part,path)
	if path ~= nil then
		for e, r in pairs(path.child) do
			if r.name == name then
				return r
			end
		end
	end
end

function fshlp.getPartition(par)
	return partition.get(par)
end

return fshlp