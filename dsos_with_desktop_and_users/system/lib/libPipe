--Pipez n Shiz, were playin Mario!--
local term = term
local rt = term
local pipes = {}
local pat = 1
function new(w,h,color) --Creates a new pipe
	local pid = pat
	pat = pat+1
	local p = {}
	local cursor = {1,1,colors.white,colors.black}
	local textData = {}
	local fgData = {}
	local bgData = {}
	for x = 1, w do
		textData[x] = {}
		fgData[x] = {}
		bgData[x] = {}
		for y = 1, h do
			textData[x][y] = " "
			fgData[x][y] = -1
			bgData[x][y] = -1
		end
	end
	p.textData = textData
	p.fgData = fgData
	p.bgData = bgData
	p.cursor = cursor
	p.w = w
	p.h = h
	pipes[pid] = p
	return pid
end
function lock(pid)
	pipes[pid].lock = os.getCallingPID()
end
function unlock(pid)
	if pipes[pid].lock == os.getCallingPID() then
		pipes[pid].lock = nil
	end
end
function getAPI(pid) --Gets the ComputerCraft standard term api that maps out to the pipe
	local term = {}
	local p = pipes[pid]
	if p.lock ~= nil and p.lock ~= os.getCallingPID() then
		error("Pipe is locked by process "..p.lock)
	end
	function term.setCursorPos(x,y)
		p.cursor[1] = x
		p.cursor[2] = y
	end
	function term.getCursorPos()
		return p.cursor[1], p.cursor[2]
	end
	function term.write(t)
		for i=1, #t do
			if p.cursor[1]<=p.w then
				p.textData[p.cursor[1]][p.cursor[2]] = t:sub(i,i)
				p.fgData[p.cursor[1]][p.cursor[2]] = p.cursor[3]
				if p.cursor[4] > 0 then
					p.bgData[p.cursor[1]][p.cursor[2]] = p.cursor[4]
				end
			end
			p.cursor[1] = p.cursor[1]+1
		end
	end
	function term.setCursorBlink(b)
	
	end
	function term.getSize()
		return p.w, p.h
	end
	function term.setTextColor(f)
		--Comming soon: Color checks
		p.cursor[3] = f
	end
	function term.setBackgroundColor(f)
		--Comming soon: Color checks
		p.cursor[4] = f
	end
	term.setTextColour = term.setTextColor
	term.setBackgroundColour = term.setBackgroundColor
	function term.scroll(n)
		for i=1, n do
			for y=2, p.h do
				for x=1, p.w do
					p.textData[x][y-1] = p.textData[x][y]
					p.fgData[x][y-1] = p.fgData[x][y]
					p.bgData[x][y-1] = p.bgData[x][y]
				end
			end
			for x=1, p.w do
				p.textData[x][p.h] = " "
				p.fgData[x][p.h] = p.cursor[3]
				p.bgData[x][p.h] = p.cursor[4]
			end
		end
	end
	function term.clearLine()
		if p.cursor[2]<=p.h then
			for x=1, p.w do
				p.textData[x][p.cursor[2]] = " "
				p.fgData[x][p.cursor[2]] = p.cursor[3]
				p.bgData[x][p.cursor[2]] = p.cursor[4]
			end
		end
	end
	function term.clear()
		for x=1, p.w do
			for y=1, p.h do
				p.textData[x][y] = " "
				p.fgData[x][y] = p.cursor[3]
				p.bgData[x][y] = p.cursor[4]
			end
		end
	end
	function term.isColor()
		return true
	end
	term.isColour = term.isColor
	return term
end
function getSize(pid)
	return pipes[pid].w,pipes[pid].h
end
function render(pid,dx,dy,term)
	term = term or rt
	dx = dx or 1
	dy = dy or 1
	dy = dy-1
	local p = pipes[pid]
	local w = p.w
	local fgData = p.fgData
	local bgData = p.bgData
	local textData = p.textData
	local color = term.isColor()
	for y=1, p.h do
		local t = ""
		local fc = -1
		local bc = -1
		term.setCursorPos(dx,y+dy)
		for x=1, w do
			if fgData[x][y] ~= fc or bgData[x][y] ~= bc then
				if fc ~= -1 and fc then
					if color then term.setTextColor(fc) end
				end
				if bc ~= -1 and bc then
					if color then term.setBackgroundColor(bc) end
				end
				term.write(t)
				fc = fgData[x][y]
				bc = bgData[x][y]
				t = ""
			end
			t = t..textData[x][y]
		end
		if fc ~= -1 and fc then
			if color then term.setTextColor(fc) end
		end
		if bc ~= -1 and bc then
			if color then term.setBackgroundColor(bc) end
		end
		term.write(t)
	end
end