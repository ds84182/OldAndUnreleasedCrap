dofile("LiL")

local function serializeImpl( t, tTracking )	
	local sType = type(t)
	if sType == "table" then
		if tTracking[t] ~= nil then
			error( "Cannot serialize table with recursive entries" )
		end
		tTracking[t] = true
		
		local result = "{"
		for k,v in pairs(t) do
			result = result..("["..serializeImpl(k, tTracking).."]="..serializeImpl(v, tTracking)..",")
		end
		result = result.."}"
		tTracking[t] = nil
		return result
		
	elseif sType == "string" then
		return string.format( "%q", t )
	
	elseif sType == "number" or sType == "boolean" or sType == "nil" then
		return tostring(t)
		
	else
		error( "Cannot serialize type "..sType )
		
	end
end

function serialize( t )
	local tTracking = {}
	return serializeImpl( t, tTracking )
end

local BIOS = 
[[
	function __inext(tbl, key)
		key = key + 1
		if tbl[key] ~= nil then
			return key, tbl[key]
		else
			return nil, nil
		end
	end

	function ipairs(tbl)
		return __inext, tbl, 0
	end

	function pairs(tbl)
		return next, tbl, nil
	end
]]

local MAIN_CODE = os.version and
[[
	local i = 1
	while true do
		term.clear()
		term.setCursorPos(1,1)
		term.write(i.." press any key to increment")
		os.pullEvent("key")
		i = i+1
	end
]]
or
[[
	print("Hello, World from LiL!")
	loadstring("print('Loadstring works')")()
	while true do
		print("In a loop")
	end
]]

local astList = {
	LiL.parse(LiL.tokenize(BIOS)),
	LiL.parse(LiL.tokenize(MAIN_CODE)),
}

local pgd
local stk

local fh
fh = fs.open("OUT","r")
local str = fh.readAll()
fh.close()
pgd = textutils.unserialize(str)
fh = fs.open("SCOPE","r")
str = fh.readAll()
fh.close()
stk = textutils.unserialize(str)

local int = LiL.interpret({},pgd,stk)
local numS = 0
local ret = {}

while true do
	local status, err, t = pcall(int.run,unpack(ret))
	numS = numS+1
	if status and err == false then break end
	if not status and type(err) == "table" then
		error(err[1], ": ", err[2])
	elseif not status then
		error(tostring(err))
	end
	if os.pullEvent then
		if t[1] ~= "inst" then
			ret = {os.pullEvent(unpack(t))}
		end
	end
end
print("Number of statements run: "..numS)
